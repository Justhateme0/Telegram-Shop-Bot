from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from database.db_handler import db
from keyboards.payment_kb import get_admin_menu_keyboard
from config import ADMIN_ID

router = Router()

class AdminStates(StatesGroup):
    waiting_wallet = State()
    waiting_broadcast = State()
    waiting_product_category = State()
    waiting_product_name = State()
    waiting_product_price_rub = State()
    waiting_product_price_usd = State()
    waiting_product_description = State()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        return

    stats = await db.get_orders_stats()
    users_count = await db.get_users_count()

    text = f"""
üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å X-STOODERS

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['waiting']}
‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {stats['pending']}
"""

    await message.answer(text, reply_markup=get_admin_menu_keyboard())

@router.callback_query(F.data == "admin_orders")
async def show_pending_orders(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    orders = await db.get_pending_orders()

    if not orders:
        await callback.message.edit_text(
            "üìã –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            reply_markup=get_admin_menu_keyboard()
        )
        return

    text = "üìã –ó–∞–∫–∞–∑—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n"

    for order in orders[:10]:
        username = f"@{order['username']}" if order['username'] else "–±–µ–∑ username"
        text += f"üÜî #{order['id']}\n"
        text += f"üë§ {order['first_name']} ({username})\n"
        text += f"üì¶ {order['product_name']}\n"
        text += f"üí∞ {order['price_rub']}‚ÇΩ / ${order['price_usd']}\n\n"

    await callback.message.edit_text(text, reply_markup=get_admin_menu_keyboard())

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    stats = await db.get_orders_stats()
    users_count = await db.get_users_count()
    wallet = await db.get_usdt_wallet()

    text = f"""
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}

üì¶ –ó–∞–∫–∞–∑—ã:
‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['waiting']}
‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–æ: {stats['pending']}

üí≥ USDT –∫–æ—à–µ–ª–µ–∫: {wallet or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
"""

    await callback.message.edit_text(text, reply_markup=get_admin_menu_keyboard())

@router.callback_query(F.data == "admin_wallet")
async def change_wallet(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_wallet)

    current_wallet = await db.get_usdt_wallet()
    text = f"üí≥ –¢–µ–∫—É—â–∏–π USDT –∫–æ—à–µ–ª–µ–∫: {current_wallet or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å USDT –∫–æ—à–µ–ª—å–∫–∞:"

    await callback.message.edit_text(text)

@router.message(AdminStates.waiting_wallet)
async def save_wallet(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    wallet = message.text.strip()

    if len(wallet) < 10:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
        return

    success = await db.set_usdt_wallet(wallet)

    if success:
        await message.answer(
            f"‚úÖ USDT –∫–æ—à–µ–ª–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:\n<code>{wallet}</code>",
            parse_mode="HTML",
            reply_markup=get_admin_menu_keyboard()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞")

    await state.clear()

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_broadcast)

    users_count = await db.get_users_count()
    text = f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
    text += f"üë• –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"

    await callback.message.edit_text(text)

@router.message(AdminStates.waiting_broadcast)
async def send_broadcast(message: Message, state: FSMContext, bot):
    if not is_admin(message.from_user.id):
        return

    users = await db.get_all_users()
    broadcast_text = message.text

    sent_count = 0
    failed_count = 0

    status_message = await message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for user_id in users:
        try:
            await bot.send_message(user_id, broadcast_text)
            sent_count += 1
        except Exception:
            failed_count += 1

        if (sent_count + failed_count) % 50 == 0:
            await status_message.edit_text(
                f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –æ—à–∏–±–æ–∫ {failed_count}"
            )

    final_text = f"""
‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
"""

    await status_message.edit_text(final_text, reply_markup=get_admin_menu_keyboard())
    await state.clear()

@router.callback_query(F.data.startswith("admin_confirm_"))
async def confirm_payment(callback: CallbackQuery, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    order_id = int(callback.data.split("_")[2])

    order = await db.get_order(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    success = await db.update_order_status(order_id, "completed")

    if success:
        try:
            await callback.message.edit_caption(
                callback.message.caption + "\n\n‚úÖ –û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê"
            )
        except Exception:
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

        try:
            await bot.send_message(
                order["user_id"],
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {order['product_name']}\n"
                f"üí∞ –°—É–º–º–∞: {order['price_rub']}‚ÇΩ / ${order['price_usd']}\n\n"
                f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: @skrdllQ"
            )
        except Exception:
            pass
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("admin_decline_"))
async def decline_payment(callback: CallbackQuery, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    order_id = int(callback.data.split("_")[2])

    order = await db.get_order(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    success = await db.update_order_status(order_id, "declined")

    if success:
        try:
            await callback.message.edit_caption(
                callback.message.caption + "\n\n‚ùå –û–ü–õ–ê–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê"
            )
        except Exception:
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

        try:
            await bot.send_message(
                order["user_id"],
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {order['product_name']}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n"
                f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @skrdllQ"
            )
        except Exception:
            pass
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "admin_products")
async def show_products_management(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    from keyboards.payment_kb import get_products_management_keyboard

    text = """
üõç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏.
–¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ—Ç–∞.
"""

    await callback.message.edit_text(text, reply_markup=get_products_management_keyboard())

@router.callback_query(F.data == "admin_back")
async def back_to_admin_panel(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    stats = await db.get_orders_stats()
    users_count = await db.get_users_count()

    text = f"""
üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å X-STOODERS

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['waiting']}
‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {stats['pending']}
"""

    await callback.message.edit_text(text, reply_markup=get_admin_menu_keyboard())

@router.callback_query(F.data == "admin_add_product")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_product_category)

    text = """
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
–ü—Ä–∏–º–µ—Ä—ã: VPN, –ü—Ä–æ–∫—Å–∏, –ú–æ–¥–µ–ª–∏, –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ —Ç.–¥.
"""

    await callback.message.edit_text(text)

@router.message(AdminStates.waiting_product_category)
async def add_product_category(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    category = message.text.strip()
    await state.update_data(category=category)
    await state.set_state(AdminStates.waiting_product_name)

    text = f"""
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}

–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
–ù–∞–ø—Ä–∏–º–µ—Ä: NordVPN Premium, Rotation 10GB, STANDART –º–æ–¥–µ–ª—å –∏ —Ç.–¥.
"""

    await message.answer(text)

@router.message(AdminStates.waiting_product_name)
async def add_product_name(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    name = message.text.strip()
    data = await state.get_data()

    await state.update_data(name=name)
    await state.set_state(AdminStates.waiting_product_price_rub)

    text = f"""
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}
–ù–∞–∑–≤–∞–Ω–∏–µ: {name}

–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ 0, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö –Ω–µ –Ω—É–∂–Ω–∞
"""

    await message.answer(text)

@router.message(AdminStates.waiting_product_price_rub)
async def add_product_price_rub(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    try:
        price_rub = int(message.text.strip())
        if price_rub < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    await state.update_data(price_rub=price_rub if price_rub > 0 else None)
    await state.set_state(AdminStates.waiting_product_price_usd)

    text = f"""
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}
–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}
–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {price_rub if price_rub > 0 else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ 0, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –Ω–µ –Ω—É–∂–Ω–∞
"""

    await message.answer(text)

@router.message(AdminStates.waiting_product_price_usd)
async def add_product_price_usd(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    try:
        price_usd = int(message.text.strip())
        if price_usd < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    await state.update_data(price_usd=price_usd if price_usd > 0 else None)
    await state.set_state(AdminStates.waiting_product_description)

    text = f"""
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}
–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}
–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {data.get('price_rub') or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
–¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: {price_usd if price_usd > 0 else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
"""

    await message.answer(text)

@router.message(AdminStates.waiting_product_description)
async def add_product_description(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    description = message.text.strip()
    if description.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = None

    data = await state.get_data()

    success = await db.add_custom_product(
        category=data['category'],
        name=data['name'],
        price_rub=data.get('price_rub'),
        price_usd=data.get('price_usd'),
        description=description
    )

    if success:
        price_text = ""
        if data.get('price_rub'):
            price_text += f"{data['price_rub']}‚ÇΩ"
        if data.get('price_usd'):
            if price_text:
                price_text += f" / ${data['price_usd']}"
            else:
                price_text = f"${data['price_usd']}"
        if not price_text:
            price_text = "–ü–æ –∑–∞–ø—Ä–æ—Å—É"

        text = f"""
‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!

üì¶ {data['name']}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}
üí∞ –¶–µ–Ω–∞: {price_text}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

–¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ—Ç–∞.
"""

        from keyboards.payment_kb import get_products_management_keyboard

        await message.answer(text, reply_markup=get_products_management_keyboard())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()

@router.callback_query(F.data == "admin_list_products")
async def list_products(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    products = await db.get_custom_products()

    if not products:
        from keyboards.payment_kb import get_products_management_keyboard

        await callback.message.edit_text(
            "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'",
            reply_markup=get_products_management_keyboard()
        )
        return

    keyboard = []

    for product in products:
        price_text = ""
        if product['price_rub'] and product['price_usd']:
            price_text = f" - {product['price_rub']}‚ÇΩ/${product['price_usd']}"
        elif product['price_rub']:
            price_text = f" - {product['price_rub']}‚ÇΩ"
        elif product['price_usd']:
            price_text = f" - ${product['price_usd']}"

        button_text = f"{product['name']}{price_text}"

        keyboard.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"admin_view_product_{product['id']}"
        )])

    keyboard.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_products"
    )])

    from aiogram.types import InlineKeyboardMarkup

    await callback.message.edit_text(
        f"üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ({len(products)} —à—Ç.)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("admin_view_product_"))
async def view_product(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    product_id = int(callback.data.split("_")[3])
    product = await db.get_product_by_id(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    price_text = ""
    if product['price_rub'] and product['price_usd']:
        price_text = f"{product['price_rub']}‚ÇΩ / ${product['price_usd']}"
    elif product['price_rub']:
        price_text = f"{product['price_rub']}‚ÇΩ"
    elif product['price_usd']:
        price_text = f"${product['price_usd']}"
    else:
        price_text = "–ü–æ –∑–∞–ø—Ä–æ—Å—É"

    text = f"""
üì¶ {product['name']}

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}
üí∞ –¶–µ–Ω–∞: {price_text}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if product['availability'] else '–û—Ç–∫–ª—é—á–µ–Ω'}
üÜî ID: {product['id']}
"""

    from keyboards.payment_kb import get_product_actions_keyboard

    await callback.message.edit_text(text, reply_markup=get_product_actions_keyboard(product_id))

@router.callback_query(F.data.startswith("admin_delete_product_"))
async def confirm_delete_product(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    product_id = int(callback.data.split("_")[3])
    product = await db.get_product_by_id(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = f"""
üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

üì¶ {product['name']}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
–í—Å–µ –∑–∞–∫–∞–∑—ã —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏.

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?
"""

    from keyboards.payment_kb import get_confirm_delete_keyboard

    await callback.message.edit_text(text, reply_markup=get_confirm_delete_keyboard(product_id))

@router.callback_query(F.data.startswith("admin_confirm_delete_"))
async def delete_product(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    product_id = int(callback.data.split("_")[3])

    success = await db.delete_custom_product(product_id)

    if success:
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")

        products = await db.get_custom_products()

        if not products:
            from keyboards.payment_kb import get_products_management_keyboard

            await callback.message.edit_text(
                "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'",
                reply_markup=get_products_management_keyboard()
            )
        else:
            await list_products(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", show_alert=True)

@router.callback_query(F.data.startswith("admin_disable_product_"))
async def disable_product(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    product_id = int(callback.data.split("_")[3])

    success = await db.update_product_availability(product_id, False)

    if success:
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
        await view_product(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", show_alert=True)