from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import uuid
from database.db_handler import db
from keyboards.payment_kb import get_payment_keyboard
from keyboards.main_menu import get_main_menu
from config import PRODUCTS, USDT_WALLET, ADMIN_ID

router = Router()

class PaymentStates(StatesGroup):
    waiting_screenshot = State()

user_orders = {}

@router.callback_query(F.data.startswith("buy_"))
async def start_purchase(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_", 2)
    if len(parts) < 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    category = parts[1]
    product_name = parts[2]

    if category not in PRODUCTS or product_name not in PRODUCTS[category]["items"]:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    product_data = PRODUCTS[category]["items"][product_name]

    price_rub = product_data.get("rub")
    price_usd = product_data.get("usd")

    order_id = await db.create_order(
        user_id=callback.from_user.id,
        product_category=category,
        product_name=product_name,
        price_rub=price_rub,
        price_usd=price_usd
    )

    if not order_id:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    user_orders[callback.from_user.id] = order_id

    order_uuid = str(uuid.uuid4())[:8].upper()

    text = f"""
üõí –ó–∞–∫–∞–∑ #{order_uuid}

üì¶ –¢–æ–≤–∞—Ä: {product_name}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {PRODUCTS[category]['name']}

üí∞ –ö –æ–ø–ª–∞—Ç–µ:
"""

    if price_rub and price_usd:
        text += f"‚Ä¢ {price_rub} ‚ÇΩ –∏–ª–∏ ${price_usd} USD\n"
    elif price_usd:
        text += f"‚Ä¢ ${price_usd} USD\n"
    elif price_rub:
        text += f"‚Ä¢ {price_rub} ‚ÇΩ\n"

    wallet = await db.get_usdt_wallet() or USDT_WALLET

    text += f"""
üí≥ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT (TRC20):
<code>{wallet}</code>

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ USDT TRC20!
"""

    await callback.message.edit_text(
        text,
        reply_markup=get_payment_keyboard(order_id),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("upload_screenshot_"))
async def request_screenshot(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[2])

    order = await db.get_order(order_id)
    if not order or order["user_id"] != callback.from_user.id:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.set_state(PaymentStates.waiting_screenshot)
    await state.update_data(order_id=order_id)

    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
    )

@router.message(PaymentStates.waiting_screenshot, F.photo)
async def handle_screenshot(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    order_id = data.get("order_id")

    if not order_id:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    order = await db.get_order(order_id)
    if not order:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    file_id = message.photo[-1].file_id
    success = await db.add_payment_screenshot(order_id, file_id)

    if success:
        await message.answer(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!\n\n"
            "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
            reply_markup=await get_main_menu()
        )

        if ADMIN_ID:
            try:
                user = await db.get_user(message.from_user.id)
                username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"

                admin_text = f"""
üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user['first_name']} ({username})
üì¶ –¢–æ–≤–∞—Ä: {order['product_name']}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order['product_category']}
üí∞ –°—É–º–º–∞: {order['price_rub']}‚ÇΩ / ${order['price_usd']}
üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}
"""

                from keyboards.payment_kb import get_admin_order_keyboard

                await bot.send_photo(
                    ADMIN_ID,
                    file_id,
                    caption=admin_text,
                    reply_markup=get_admin_order_keyboard(order_id)
                )
            except Exception:
                pass
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()

@router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])

    order = await db.get_order(order_id)
    if not order or order["user_id"] != callback.from_user.id:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    success = await db.update_order_status(order_id, "cancelled")

    if success:
        await callback.message.edit_text(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=await get_main_menu()
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞", show_alert=True)

@router.callback_query(F.data.startswith("buy_custom_"))
async def start_custom_purchase(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[2])

    product = await db.get_product_by_id(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    order_id = await db.create_order(
        user_id=callback.from_user.id,
        product_category=product['category'],
        product_name=product['name'],
        price_rub=product['price_rub'],
        price_usd=product['price_usd']
    )

    if not order_id:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    user_orders[callback.from_user.id] = order_id

    order_uuid = str(uuid.uuid4())[:8].upper()

    text = f"""
üõí –ó–∞–∫–∞–∑ #{order_uuid}

üì¶ –¢–æ–≤–∞—Ä: {product['name']}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}

üí∞ –ö –æ–ø–ª–∞—Ç–µ:
"""

    if product['price_rub'] and product['price_usd']:
        text += f"‚Ä¢ {product['price_rub']} ‚ÇΩ –∏–ª–∏ ${product['price_usd']} USD\n"
    elif product['price_usd']:
        text += f"‚Ä¢ ${product['price_usd']} USD\n"
    elif product['price_rub']:
        text += f"‚Ä¢ {product['price_rub']} ‚ÇΩ\n"
    else:
        text += "‚Ä¢ –ü–æ –∑–∞–ø—Ä–æ—Å—É - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"

    wallet = await db.get_usdt_wallet() or USDT_WALLET

    text += f"""
üí≥ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT (TRC20):
<code>{wallet}</code>

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ USDT TRC20!
"""

    await callback.message.edit_text(
        text,
        reply_markup=get_payment_keyboard(order_id),
        parse_mode="HTML"
    )